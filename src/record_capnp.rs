// Generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: record.capnp

pub mod record {
    #[derive(Copy, Clone)]
    pub struct Owned;
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
        type Reader = Reader<'a>;
        type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
        type Reader = Reader<'a>;
        type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        #[inline]
        fn type_id() -> u64 {
            _private::TYPE_ID
        }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
        fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
            Reader { reader }
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::std::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Reader<'a>> {
            ::std::result::Result::Ok(::capnp::traits::FromStructReader::new(
                reader.get_struct(default)?,
            ))
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader {
            Reader { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_ts(self) -> f64 {
            self.reader.get_data_field::<f64>(0)
        }
        #[inline]
        pub fn get_hostname(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::std::option::Option::None,
            )
        }
        pub fn has_hostname(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_facility(self) -> u8 {
            self.reader.get_data_field::<u8>(8)
        }
        #[inline]
        pub fn get_severity(self) -> u8 {
            self.reader.get_data_field::<u8>(9)
        }
        #[inline]
        pub fn get_appname(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(1),
                ::std::option::Option::None,
            )
        }
        pub fn has_appname(&self) -> bool {
            !self.reader.get_pointer_field(1).is_null()
        }
        #[inline]
        pub fn get_procid(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(2),
                ::std::option::Option::None,
            )
        }
        pub fn has_procid(&self) -> bool {
            !self.reader.get_pointer_field(2).is_null()
        }
        #[inline]
        pub fn get_msgid(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(3),
                ::std::option::Option::None,
            )
        }
        pub fn has_msgid(&self) -> bool {
            !self.reader.get_pointer_field(3).is_null()
        }
        #[inline]
        pub fn get_msg(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(4),
                ::std::option::Option::None,
            )
        }
        pub fn has_msg(&self) -> bool {
            !self.reader.get_pointer_field(4).is_null()
        }
        #[inline]
        pub fn get_full_msg(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(5),
                ::std::option::Option::None,
            )
        }
        pub fn has_full_msg(&self) -> bool {
            !self.reader.get_pointer_field(5).is_null()
        }
        #[inline]
        pub fn get_sd_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(6),
                ::std::option::Option::None,
            )
        }
        pub fn has_sd_id(&self) -> bool {
            !self.reader.get_pointer_field(6).is_null()
        }
        #[inline]
        pub fn get_pairs(
            self,
        ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::record_capnp::pair::Owned>>
        {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(7),
                ::std::option::Option::None,
            )
        }
        pub fn has_pairs(&self) -> bool {
            !self.reader.get_pointer_field(7).is_null()
        }
        #[inline]
        pub fn get_extra(
            self,
        ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::record_capnp::pair::Owned>>
        {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(8),
                ::std::option::Option::None,
            )
        }
        pub fn has_extra(&self) -> bool {
            !self.reader.get_pointer_field(8).is_null()
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        #[inline]
        fn struct_size() -> ::capnp::private::layout::StructSize {
            _private::STRUCT_SIZE
        }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        #[inline]
        fn type_id() -> u64 {
            _private::TYPE_ID
        }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
        fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
            Builder { builder }
        }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            _size: u32,
        ) -> Builder<'a> {
            ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::std::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Builder<'a>> {
            ::std::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
                builder.get_struct(_private::STRUCT_SIZE, default)?,
            ))
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
        fn set_pointer_builder<'b>(
            pointer: ::capnp::private::layout::PointerBuilder<'b>,
            value: Reader<'a>,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            ::capnp::traits::FromStructReader::new(self.builder.into_reader())
        }
        pub fn reborrow(&mut self) -> Builder {
            Builder { ..*self }
        }
        pub fn reborrow_as_reader(&self) -> Reader {
            ::capnp::traits::FromStructReader::new(self.builder.into_reader())
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.into_reader().total_size()
        }
        #[inline]
        pub fn get_ts(self) -> f64 {
            self.builder.get_data_field::<f64>(0)
        }
        #[inline]
        pub fn set_ts(&mut self, value: f64) {
            self.builder.set_data_field::<f64>(0, value);
        }
        #[inline]
        pub fn get_hostname(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::std::option::Option::None,
            )
        }
        #[inline]
        pub fn set_hostname(&mut self, value: ::capnp::text::Reader) {
            self.builder.get_pointer_field(0).set_text(value);
        }
        #[inline]
        pub fn init_hostname(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(0).init_text(size)
        }
        pub fn has_hostname(&self) -> bool {
            !self.builder.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_facility(self) -> u8 {
            self.builder.get_data_field::<u8>(8)
        }
        #[inline]
        pub fn set_facility(&mut self, value: u8) {
            self.builder.set_data_field::<u8>(8, value);
        }
        #[inline]
        pub fn get_severity(self) -> u8 {
            self.builder.get_data_field::<u8>(9)
        }
        #[inline]
        pub fn set_severity(&mut self, value: u8) {
            self.builder.set_data_field::<u8>(9, value);
        }
        #[inline]
        pub fn get_appname(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(1),
                ::std::option::Option::None,
            )
        }
        #[inline]
        pub fn set_appname(&mut self, value: ::capnp::text::Reader) {
            self.builder.get_pointer_field(1).set_text(value);
        }
        #[inline]
        pub fn init_appname(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(1).init_text(size)
        }
        pub fn has_appname(&self) -> bool {
            !self.builder.get_pointer_field(1).is_null()
        }
        #[inline]
        pub fn get_procid(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(2),
                ::std::option::Option::None,
            )
        }
        #[inline]
        pub fn set_procid(&mut self, value: ::capnp::text::Reader) {
            self.builder.get_pointer_field(2).set_text(value);
        }
        #[inline]
        pub fn init_procid(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(2).init_text(size)
        }
        pub fn has_procid(&self) -> bool {
            !self.builder.get_pointer_field(2).is_null()
        }
        #[inline]
        pub fn get_msgid(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(3),
                ::std::option::Option::None,
            )
        }
        #[inline]
        pub fn set_msgid(&mut self, value: ::capnp::text::Reader) {
            self.builder.get_pointer_field(3).set_text(value);
        }
        #[inline]
        pub fn init_msgid(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(3).init_text(size)
        }
        pub fn has_msgid(&self) -> bool {
            !self.builder.get_pointer_field(3).is_null()
        }
        #[inline]
        pub fn get_msg(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(4),
                ::std::option::Option::None,
            )
        }
        #[inline]
        pub fn set_msg(&mut self, value: ::capnp::text::Reader) {
            self.builder.get_pointer_field(4).set_text(value);
        }
        #[inline]
        pub fn init_msg(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(4).init_text(size)
        }
        pub fn has_msg(&self) -> bool {
            !self.builder.get_pointer_field(4).is_null()
        }
        #[inline]
        pub fn get_full_msg(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(5),
                ::std::option::Option::None,
            )
        }
        #[inline]
        pub fn set_full_msg(&mut self, value: ::capnp::text::Reader) {
            self.builder.get_pointer_field(5).set_text(value);
        }
        #[inline]
        pub fn init_full_msg(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(5).init_text(size)
        }
        pub fn has_full_msg(&self) -> bool {
            !self.builder.get_pointer_field(5).is_null()
        }
        #[inline]
        pub fn get_sd_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(6),
                ::std::option::Option::None,
            )
        }
        #[inline]
        pub fn set_sd_id(&mut self, value: ::capnp::text::Reader) {
            self.builder.get_pointer_field(6).set_text(value);
        }
        #[inline]
        pub fn init_sd_id(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(6).init_text(size)
        }
        pub fn has_sd_id(&self) -> bool {
            !self.builder.get_pointer_field(6).is_null()
        }
        #[inline]
        pub fn get_pairs(
            self,
        ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::record_capnp::pair::Owned>>
        {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(7),
                ::std::option::Option::None,
            )
        }
        #[inline]
        pub fn set_pairs(
            &mut self,
            value: ::capnp::struct_list::Reader<'a, crate::record_capnp::pair::Owned>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.get_pointer_field(7),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_pairs(
            self,
            size: u32,
        ) -> ::capnp::struct_list::Builder<'a, crate::record_capnp::pair::Owned> {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(7),
                size,
            )
        }
        pub fn has_pairs(&self) -> bool {
            !self.builder.get_pointer_field(7).is_null()
        }
        #[inline]
        pub fn get_extra(
            self,
        ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::record_capnp::pair::Owned>>
        {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(8),
                ::std::option::Option::None,
            )
        }
        #[inline]
        pub fn set_extra(
            &mut self,
            value: ::capnp::struct_list::Reader<'a, crate::record_capnp::pair::Owned>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.get_pointer_field(8),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_extra(
            self,
            size: u32,
        ) -> ::capnp::struct_list::Builder<'a, crate::record_capnp::pair::Owned> {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(8),
                size,
            )
        }
        pub fn has_extra(&self) -> bool {
            !self.builder.get_pointer_field(8).is_null()
        }
    }

    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
            Pipeline {
                _typeless: typeless,
            }
        }
    }
    impl Pipeline {}
    mod _private {
        use capnp::private::layout;
        pub const STRUCT_SIZE: layout::StructSize = layout::StructSize {
            data: 2,
            pointers: 9,
        };
        pub const TYPE_ID: u64 = 0xe106_8a6a_ee02_baba;
    }
}

pub mod pair {
    #[derive(Copy, Clone)]
    pub struct Owned;
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
        type Reader = Reader<'a>;
        type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
        type Reader = Reader<'a>;
        type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        #[inline]
        fn type_id() -> u64 {
            _private::TYPE_ID
        }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
        fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
            Reader { reader }
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::std::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Reader<'a>> {
            ::std::result::Result::Ok(::capnp::traits::FromStructReader::new(
                reader.get_struct(default)?,
            ))
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader {
            Reader { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_key(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::std::option::Option::None,
            )
        }
        pub fn has_key(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_value(self) -> crate::record_capnp::pair::value::Reader<'a> {
            ::capnp::traits::FromStructReader::new(self.reader)
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        #[inline]
        fn struct_size() -> ::capnp::private::layout::StructSize {
            _private::STRUCT_SIZE
        }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        #[inline]
        fn type_id() -> u64 {
            _private::TYPE_ID
        }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
        fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
            Builder { builder }
        }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            _size: u32,
        ) -> Builder<'a> {
            ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::std::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Builder<'a>> {
            ::std::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
                builder.get_struct(_private::STRUCT_SIZE, default)?,
            ))
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
        fn set_pointer_builder<'b>(
            pointer: ::capnp::private::layout::PointerBuilder<'b>,
            value: Reader<'a>,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            ::capnp::traits::FromStructReader::new(self.builder.into_reader())
        }
        pub fn reborrow(&mut self) -> Builder {
            Builder { ..*self }
        }
        pub fn reborrow_as_reader(&self) -> Reader {
            ::capnp::traits::FromStructReader::new(self.builder.into_reader())
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.into_reader().total_size()
        }
        #[inline]
        pub fn get_key(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::std::option::Option::None,
            )
        }
        #[inline]
        pub fn set_key(&mut self, value: ::capnp::text::Reader) {
            self.builder.get_pointer_field(0).set_text(value);
        }
        #[inline]
        pub fn init_key(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(0).init_text(size)
        }
        pub fn has_key(&self) -> bool {
            !self.builder.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_value(self) -> crate::record_capnp::pair::value::Builder<'a> {
            ::capnp::traits::FromStructBuilder::new(self.builder)
        }
        #[inline]
        pub fn init_value(self) -> crate::record_capnp::pair::value::Builder<'a> {
            self.builder.set_data_field::<u16>(0, 0);
            self.builder.get_pointer_field(1).clear();
            self.builder.set_bool_field(16, false);
            self.builder.set_data_field::<f64>(1, 0f64);
            self.builder.set_data_field::<i64>(1, 0i64);
            self.builder.set_data_field::<u64>(1, 0u64);
            ::capnp::traits::FromStructBuilder::new(self.builder)
        }
    }

    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
            Pipeline {
                _typeless: typeless,
            }
        }
    }
    impl Pipeline {
        pub fn get_value(&self) -> crate::record_capnp::pair::value::Pipeline {
            ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
        }
    }
    mod _private {
        use capnp::private::layout;
        pub const STRUCT_SIZE: layout::StructSize = layout::StructSize {
            data: 2,
            pointers: 2,
        };
        pub const TYPE_ID: u64 = 0xb4a6_8d38_a716_233d;
    }

    pub mod value {
        pub use self::Which::{Bool, Null, String, F64, I64, U64};

        #[derive(Copy, Clone)]
        pub struct Owned;
        impl<'a> ::capnp::traits::Owned<'a> for Owned {
            type Reader = Reader<'a>;
            type Builder = Builder<'a>;
        }
        impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
            type Reader = Reader<'a>;
            type Builder = Builder<'a>;
        }
        impl ::capnp::traits::Pipelined for Owned {
            type Pipeline = Pipeline;
        }

        #[derive(Clone, Copy)]
        pub struct Reader<'a> {
            reader: ::capnp::private::layout::StructReader<'a>,
        }

        impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
            #[inline]
            fn type_id() -> u64 {
                _private::TYPE_ID
            }
        }
        impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
            fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
                Reader { reader }
            }
        }

        impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
            fn get_from_pointer(
                reader: &::capnp::private::layout::PointerReader<'a>,
                default: ::std::option::Option<&'a [::capnp::Word]>,
            ) -> ::capnp::Result<Reader<'a>> {
                ::std::result::Result::Ok(::capnp::traits::FromStructReader::new(
                    reader.get_struct(default)?,
                ))
            }
        }

        impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
            fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                self.reader
            }
        }

        impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
            fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                self.reader
                    .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
            }
        }

        impl<'a> Reader<'a> {
            pub fn reborrow(&self) -> Reader {
                Reader { ..*self }
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.reader.total_size()
            }
            pub fn has_string(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 0 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn which(self) -> ::std::result::Result<WhichReader<'a>, ::capnp::NotInSchema> {
                match self.reader.get_data_field::<u16>(0) {
                    0 => ::std::result::Result::Ok(String(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::std::option::Option::None,
                        ),
                    )),
                    1 => ::std::result::Result::Ok(Bool(self.reader.get_bool_field(16))),
                    2 => ::std::result::Result::Ok(F64(self.reader.get_data_field::<f64>(1))),
                    3 => ::std::result::Result::Ok(I64(self.reader.get_data_field::<i64>(1))),
                    4 => ::std::result::Result::Ok(U64(self.reader.get_data_field::<u64>(1))),
                    5 => ::std::result::Result::Ok(Null(())),
                    x => ::std::result::Result::Err(::capnp::NotInSchema(x)),
                }
            }
        }

        pub struct Builder<'a> {
            builder: ::capnp::private::layout::StructBuilder<'a>,
        }
        impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
            #[inline]
            fn struct_size() -> ::capnp::private::layout::StructSize {
                _private::STRUCT_SIZE
            }
        }
        impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
            #[inline]
            fn type_id() -> u64 {
                _private::TYPE_ID
            }
        }
        impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
            fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
                Builder { builder }
            }
        }

        impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
            fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                self.builder
                    .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
            }
        }

        impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
            fn init_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                _size: u32,
            ) -> Builder<'a> {
                ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
            }
            fn get_from_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                default: ::std::option::Option<&'a [::capnp::Word]>,
            ) -> ::capnp::Result<Builder<'a>> {
                ::std::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
                    builder.get_struct(_private::STRUCT_SIZE, default)?,
                ))
            }
        }

        impl<'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
            fn set_pointer_builder<'b>(
                pointer: ::capnp::private::layout::PointerBuilder<'b>,
                value: Reader<'a>,
                canonicalize: bool,
            ) -> ::capnp::Result<()> {
                pointer.set_struct(&value.reader, canonicalize)
            }
        }

        impl<'a> Builder<'a> {
            pub fn into_reader(self) -> Reader<'a> {
                ::capnp::traits::FromStructReader::new(self.builder.into_reader())
            }
            pub fn reborrow(&mut self) -> Builder {
                Builder { ..*self }
            }
            pub fn reborrow_as_reader(&self) -> Reader {
                ::capnp::traits::FromStructReader::new(self.builder.into_reader())
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.builder.into_reader().total_size()
            }
            #[inline]
            pub fn set_string(&mut self, value: ::capnp::text::Reader) {
                self.builder.set_data_field::<u16>(0, 0);
                self.builder.get_pointer_field(1).set_text(value);
            }
            #[inline]
            pub fn init_string(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 0);
                self.builder.get_pointer_field(1).init_text(size)
            }
            pub fn has_string(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 0 {
                    return false;
                }
                !self.builder.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn set_bool(&mut self, value: bool) {
                self.builder.set_data_field::<u16>(0, 1);
                self.builder.set_bool_field(16, value);
            }
            #[inline]
            pub fn set_f64(&mut self, value: f64) {
                self.builder.set_data_field::<u16>(0, 2);
                self.builder.set_data_field::<f64>(1, value);
            }
            #[inline]
            pub fn set_i64(&mut self, value: i64) {
                self.builder.set_data_field::<u16>(0, 3);
                self.builder.set_data_field::<i64>(1, value);
            }
            #[inline]
            pub fn set_u64(&mut self, value: u64) {
                self.builder.set_data_field::<u16>(0, 4);
                self.builder.set_data_field::<u64>(1, value);
            }
            #[inline]
            pub fn set_null(&mut self, _value: ()) {
                self.builder.set_data_field::<u16>(0, 5);
            }
            #[inline]
            pub fn which(self) -> ::std::result::Result<WhichBuilder<'a>, ::capnp::NotInSchema> {
                match self.builder.get_data_field::<u16>(0) {
                    0 => ::std::result::Result::Ok(String(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::std::option::Option::None,
                        ),
                    )),
                    1 => ::std::result::Result::Ok(Bool(self.builder.get_bool_field(16))),
                    2 => ::std::result::Result::Ok(F64(self.builder.get_data_field::<f64>(1))),
                    3 => ::std::result::Result::Ok(I64(self.builder.get_data_field::<i64>(1))),
                    4 => ::std::result::Result::Ok(U64(self.builder.get_data_field::<u64>(1))),
                    5 => ::std::result::Result::Ok(Null(())),
                    x => ::std::result::Result::Err(::capnp::NotInSchema(x)),
                }
            }
        }

        pub struct Pipeline {
            _typeless: ::capnp::any_pointer::Pipeline,
        }
        impl ::capnp::capability::FromTypelessPipeline for Pipeline {
            fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
                Pipeline {
                    _typeless: typeless,
                }
            }
        }
        impl Pipeline {}
        mod _private {
            use capnp::private::layout;
            pub const STRUCT_SIZE: layout::StructSize = layout::StructSize {
                data: 2,
                pointers: 2,
            };
            pub const TYPE_ID: u64 = 0x8a99_4a2a_ad4d_9204;
        }
        pub enum Which<A0> {
            String(A0),
            Bool(bool),
            F64(f64),
            I64(i64),
            U64(u64),
            Null(()),
        }
        pub type WhichReader<'a> = Which<::capnp::Result<::capnp::text::Reader<'a>>>;
        pub type WhichBuilder<'a> = Which<::capnp::Result<::capnp::text::Builder<'a>>>;
    }
}
